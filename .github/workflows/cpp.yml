name: C++ CI

on: [ push, pull_request ]

jobs:
  precommit_checks:
    runs-on: 'ubuntu-latest'
    name: Pre-Commit Checks
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Update pip
        run: |
          python -m pip install --upgrade pip
      - name: Install and run pre-commit
        uses: pre-commit/action@v3.0.1
        with:
          extra_args: --all-files


  matrix-strategy-setup:
    needs: precommit_checks
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v3
      - id: set-matrix
        run: |
          TASKS=$(echo $(cat .github/workflows/build-matrix.json) | sed 's/ //g' )
          echo "matrix=$TASKS" >> $GITHUB_OUTPUT

  build-test-install:
    needs: matrix-strategy-setup
    name: ${{ matrix.config.os }}-${{ matrix.config.cc }}-${{ matrix.config.compiler_version }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config: ${{ fromJson(needs.matrix-strategy-setup.outputs.matrix) }}

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'true'

      - name: Cache LLVM Download
        id: cache-llvm
        uses: actions/cache@v3
        env:
          cache-name: cache-llvm-files
        with:
          path: ~/llvm
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ matrix.config.cc }}-${{ matrix.config.compiler_version }}-${{ hashFiles('**/workflows/cpp.yml') }}

      - name: Install LLVM and Clang
        if: ${{ runner.os }} == Linux && ${{ matrix.config.cc }} == clang
        uses: KyleMayes/install-llvm-action@v2
        with:
          version: ${{ matrix.config.compiler_version }}
          directory: ~/llvm
          env: 'true'

      - name: Debug matrix.config.cc
        shell: bash
        run: |
          echo "matrix.config.cc = ${{ matrix.config.cc }}"
          echo "runner.os = ${{ runner.os }}"
          echo "1st_condition = $('${{ runner.os }}' == 'Linux')"
          echo "2nd_condition = $('${{ matrix.config.cc }}' == 'gcc')"

      - name: Set up GCC
        if: ${{ runner.os }} == Linux && ${{ matrix.config.cc }} == gcc
        uses: egor-tensin/setup-gcc@v1
        with:
          version: ${{ matrix.config.compiler_version }}
          platform: x64

      - name: Install conan & numpy
        shell: bash
        run: |
          python3 -m pip install --upgrade pip setuptools
          python3 -m pip install conan numpy

      - name: Source profile
        if: runner.os == 'Linux'
        shell: bash
        run: source ~/.profile

      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v1.14
        with:
          cmake-version: '3.26'

      - name: Configure Windows compile environment
        uses: ilammy/msvc-dev-cmd@v1
        if: runner.os == 'Windows' && matrix.config.cxx == 'cl'
        with:
          arch: amd64

      - name: Configure CMake
        shell: bash
        env:
          CC: ${{ matrix.config.cc }}
          CXX: ${{ matrix.config.cxx }}
        run: >
          cmake
          -S .
          -B ./build
          -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }}
          -DWARNINGS_AS_ERRORS:BOOL=OFF
          -DUSE_PYBIND11_FINDPYTHON:BOOL=ON
          -DENABLE_CACHE:BOOL=OFF
          -DENABLE_BUILD_SANDBOX:BOOL=OFF

      - name: Build REINFORCE Library
        shell: bash
        run: |
          cmake --build ./build --config ${{ matrix.config.build_type }} --target reinforce_tests_all

      - name: Run REINFORCE Tests
        shell: bash
        run: >
          GTEST_OUTPUT=xml:gtest-report-${{ github.jobs.build-test-install.name }}.xml
          GTEST_COLOR=1
          ctest -R Test_reinforce_tests_all
          --test-dir ./build
          --verbose
          -C ${{ matrix.config.build_type }}

      - name: Upload lib test result artifacts
        uses: actions/upload-artifact@v3
        if: success()
        with:
          name: gtest-results
          path: ./build/**/gtest-report-${{ github.jobs.build-test-install.name }}.xml
          retention-days: 1

  publish-gtest-results:
    name: "Publish GTest Results"
    needs: build-test-install
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          name: gtest-results
          path: ./artifacts/gtest-results_downloaded

      - name: Display structure of downloaded files
        run: ls
        working-directory: ./artifacts/gtest-results_downloaded

      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          files: ./artifacts/**/*.xml
